-- 1. CC_COMPANY
CREATE TABLE IF NOT EXISTS APPROVAL.CC_COMPANY
(
    COMPANY_NO           INT           NOT NULL AUTO_INCREMENT PRIMARY KEY,
    BIZ_NO               VARCHAR(12)   NOT NULL UNIQUE,
    COMPANY_NAME         VARCHAR(1000) NOT NULL,
    COMPANY_ADDRESS      VARCHAR(2000) NOT NULL,
    COMPANY_CALL         VARCHAR(20)   NOT NULL,
    CREATE_DT            TIMESTAMP     NOT NULL,
    UPDATE_DT            TIMESTAMP     NULL,
    OCCUR_LEAVE_DT       TIMESTAMP     NOT NULL,
    REMAIN_LEAVE_WHETHER CHAR(1)       NOT NULL,
    DEFAULT_LEAVE_CNT    INT           NOT NULL,
    BASIC_WORK_HOURS     INT           NOT NULL,
    OVERTIME_PAY_WHETHER CHAR(1)       NOT NULL,
    SPARE                VARCHAR(200)
);

-- 2. CC_DEP
CREATE TABLE IF NOT EXISTS APPROVAL.CC_DEP
(
    DEPARTMENT_ID        INT           NOT NULL AUTO_INCREMENT PRIMARY KEY,
    PARENT_DEPARTMENT_ID INT           NULL,
    FOREIGN KEY (PARENT_DEPARTMENT_ID) REFERENCES CC_DEP (DEPARTMENT_ID) ON DELETE SET NULL ON UPDATE CASCADE,
    DEPARTMENT_NAME      VARCHAR(1000) NOT NULL UNIQUE,
    SPARE                VARCHAR(200)
);

-- 3. CC_RANK
CREATE TABLE IF NOT EXISTS APPROVAL.CC_RANK
(
    RANK_ID        INT          NOT NULL AUTO_INCREMENT PRIMARY KEY,
    PARENT_RANK_ID INT          NULL,
    FOREIGN KEY (PARENT_RANK_ID) REFERENCES CC_RANK (RANK_ID) ON DELETE SET NULL ON UPDATE CASCADE,
    RANK_NAME      VARCHAR(500) NOT NULL,
    SPARE          VARCHAR(200)
);

-- 4. CC_CODE
CREATE TABLE IF NOT EXISTS APPROVAL.CC_CODE
(
    CODE_NO   INT          NOT NULL AUTO_INCREMENT PRIMARY KEY,
    CODE_TYPE VARCHAR(20)  NOT NULL,
    CODE_NAME VARCHAR(500) NOT NULL,
    COL_SEQ   INT          NOT NULL,
    SPARE     VARCHAR(200)
);

-- 5. CC_EMP
CREATE TABLE IF NOT EXISTS APPROVAL.CC_EMP
(
    EMP_ID             INT          NOT NULL AUTO_INCREMENT PRIMARY KEY,
    EMP_EMAIL          VARCHAR(200) NOT NULL UNIQUE,
    EMP_PHONENUM       VARCHAR(13)  NOT NULL UNIQUE,
    EMP_PW             VARCHAR(64)  NOT NULL,
    EMP_NAME           VARCHAR(500) NULL,
    EMP_BIRTH          TIMESTAMP    NOT NULL,
    EMP_ACCOUNT_STATUS CHAR(1)      NOT NULL DEFAULT 'Y',
    EMP_POSITION       VARCHAR(500) NULL     DEFAULT NULL,
    PW_ERROR_CNT       INT          NOT NULL DEFAULT 0,
    EMP_JOIN_DT        TIMESTAMP    NULL     DEFAULT NULL,
    EMP_RETIRE_DT      TIMESTAMP    NULL     DEFAULT NULL,
    ROLE_ID            INT          NOT NULL DEFAULT,
    DEPARTMENT_ID      INT          NULL     DEFAULT NULL,
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES CC_DEP (DEPARTMENT_ID) ON DELETE SET NULL ON UPDATE CASCADE,
    RANK_ID            INT          NULL     DEFAULT NULL,
    FOREIGN KEY (RANK_ID) REFERENCES CC_RANK (RANK_ID) ON DELETE SET NULL ON UPDATE CASCADE,
    COMPANY_NO         INT          NULL     DEFAULT NULL,
    FOREIGN KEY (COMPANY_NO) REFERENCES CC_COMPANY (COMPANY_NO) ON DELETE SET NULL ON UPDATE CASCADE,
    DIRECT_BOSS_ID     INT          NULL,
    FOREIGN KEY (DIRECT_BOSS_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE SET NULL ON UPDATE CASCADE,
    SPARE              VARCHAR(200)
);

-- 6. CC_APPRO
CREATE TABLE IF NOT EXISTS APPROVAL.CC_APPRO
(
    DOC_NO            INT          NOT NULL PRIMARY KEY,
    DOC_TYPE          INT          NOT NULL,
    EMP_ID            INT          NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    RETENTION_PERIOD  TIMESTAMP    NULL     DEFAULT NULL,
    DOC_TITLE         VARCHAR(500) NOT NULL,
    DOC_CONTENT       TEXT         NOT NULL,
    CREATE_DT         TIMESTAMP    NOT NULL,
    DEADLINE_DT       TIMESTAMP    NULL     DEFAULT NULL,
    DRAFT_YN          CHAR(1)      NOT NULL DEFAULT 'N',
    DELETE_YN         CHAR(1)      NOT NULL DEFAULT 'N',
    TOTAL_LINE_COUNT  INT          NOT NULL DEFAULT 0,
    STATUS_LINE_COUNT INT          NULL,
    SPARE             VARCHAR(200)
);

-- 7. EMP_LEAVE
CREATE TABLE IF NOT EXISTS APPROVAL.EMP_LEAVE
(
    LEAVE_SEQ      INT       NOT NULL PRIMARY KEY AUTO_INCREMENT,
    LEAVE_TYPE     INT       NOT NULL,
    LEAVE_USE_DT   INT       NOT NULL,
    LEAVE_START_DT TIMESTAMP NOT NULL,
    EMP_ID         INT       NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    DOC_NO         INT       NOT NULL,
    FOREIGN KEY (DOC_NO) REFERENCES CC_APPRO (DOC_NO) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE          VARCHAR(200)
);

-- 8. EMP_COMMUTE
CREATE TABLE IF NOT EXISTS APPROVAL.EMP_COMMUTE
(
    EMP_COMMUTE_SEQ INT       NOT NULL PRIMARY KEY AUTO_INCREMENT,
    ATTENDANCE_TIME TIMESTAMP NOT NULL DEFAULT NOW(),
    LEAVE_WORK_TIME TIMESTAMP NOT NULL DEFAULT NOW(),
    EMP_ID          INT       NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE           VARCHAR(200)
);

-- 9. DEP_LEADER
CREATE TABLE IF NOT EXISTS APPROVAL.DEP_LEADER
(
    LEADER_ID     INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DEPARTMENT_ID INT NOT NULL,
    FOREIGN KEY (DEPARTMENT_ID) REFERENCES CC_DEP (DEPARTMENT_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    EMP_ID        INT NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE         VARCHAR(200)
);

-- 10. APPRO_LINE
CREATE TABLE IF NOT EXISTS APPROVAL.APPRO_LINE
(
    STATUS_NO     INT       NOT NULL PRIMARY KEY AUTO_INCREMENT,
    LINE_TYPE     INT       NOT NULL,
    DOC_NO        INT       NOT NULL,
    FOREIGN KEY (DOC_NO) REFERENCES CC_APPRO (DOC_NO) ON DELETE CASCADE ON UPDATE CASCADE,
    EMP_ID        INT       NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    STATUS_CODE   INT       NULL DEFAULT NULL,
    APPRO_SEQ     INT       NULL,
    APPRO_DT      TIMESTAMP NULL DEFAULT NULL,
    APPRO_COMMENT TEXT      NULL DEFAULT NULL,
    COMMENT_DT    TIMESTAMP NULL DEFAULT NULL,
    SPARE         VARCHAR(200)
);

-- 11. APPRO_LINE_SYSTEM
CREATE TABLE IF NOT EXISTS APPROVAL.APPRO_LINE_SYSTEM
(
    LINESET_NO INT       NOT NULL PRIMARY KEY AUTO_INCREMENT,
    LINE_TYPE  INT       NOT NULL,
    DOC_TYPE   INT       NOT NULL,
    CREATOR_NO INT       NOT NULL,
    FOREIGN KEY (CREATOR_NO) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    APPRO_NO   INT       NOT NULL,
    FOREIGN KEY (APPRO_NO) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CREATE_DT  TIMESTAMP NOT NULL,
    UPDATE_DT  TIMESTAMP NULL     DEFAULT NULL,
    DELETE_YN  CHAR(1)   NOT NULL DEFAULT 'N',
    APPRO_SEQ  INT       NULL,
    SPARE      VARCHAR(200)
);

-- 12. CC_TEM
CREATE TABLE IF NOT EXISTS APPROVAL.CC_TEM
(
    TEM_NO      INT          NOT NULL PRIMARY KEY AUTO_INCREMENT,
    DOC_TYPE    INT          NOT NULL,
    CREATOR_NO  INT          NOT NULL,
    FOREIGN KEY (CREATOR_NO) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    DOC_TITLE   VARCHAR(500) NOT NULL,
    DOC_CONTENT TEXT         NOT NULL,
    CREATE_DT   TIMESTAMP    NOT NULL,
    UPDATE_DT   TIMESTAMP    NULL     DEFAULT NULL,
    DELETE_YN   CHAR(1)      NOT NULL DEFAULT 'N',
    VIEW_LEVEL  INT          NOT NULL,
    SPARE       VARCHAR(200)
);

-- 13. SCHEDULE_GROUP
CREATE TABLE IF NOT EXISTS APPROVAL.SCHEDULE_GROUP
(
    SCHEDULE_GROUP_ID          INT          NOT NULL AUTO_INCREMENT PRIMARY KEY,
    SCHEDULE_GROUP_NAME        VARCHAR(500) NOT NULL,
    SCHEDULE_GROUP_DESCRIPTION TEXT         NULL,
    SCHEDULE_GROUP_CREATE_DT   TIMESTAMP    NOT NULL DEFAULT NOW(),
    SCHEDULE_GROUP_UPDATE_DT   TIMESTAMP    NOT NULL DEFAULT NOW(),
    EMP_ID                     INT          NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE                      VARCHAR(200)
);

-- 14. CC_SCHEDULE
CREATE TABLE IF NOT EXISTS APPROVAL.CC_SCHEDULE
(
    SCHEDULE_ID          INT           NOT NULL AUTO_INCREMENT PRIMARY KEY,
    SCHEDULE_NAME        VARCHAR(500)  NOT NULL,
    SCHEDULE_CONTENT     TEXT          NULL     DEFAULT NULL,
    SCHEDULE_START_DT    TIMESTAMP     NOT NULL,
    SCHEDULE_END_DT      TIMESTAMP     NOT NULL,
    SCHEDULE_PLACE       VARCHAR(2000) NULL     DEFAULT NULL,
    SCHEDULE_REGISTER_DT TIMESTAMP     NOT NULL DEFAULT NOW(),
    SCHEDULE_UPDATE_DT   TIMESTAMP     NOT NULL DEFAULT NOW(),
    ALLDAY_WHETHER       CHAR(1)       NOT NULL DEFAULT 'N',
    SCHEDULE_GROUP_ID    INT           NOT NULL,
    FOREIGN KEY (SCHEDULE_GROUP_ID) REFERENCES SCHEDULE_GROUP (SCHEDULE_GROUP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE                VARCHAR(200)
);

-- 15. SCHEDULE_EMPLOYEES
CREATE TABLE IF NOT EXISTS APPROVAL.SCHEDULE_EMPLOYEES
(
    COL_SEQ     INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    SCHEDULE_ID INT NOT NULL,
    FOREIGN KEY (SCHEDULE_ID) REFERENCES CC_SCHEDULE (SCHEDULE_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    EMP_ID      INT NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE       VARCHAR(200)
);

-- 16. SCHEDULE_GROUP_MEMBER
CREATE TABLE IF NOT EXISTS APPROVAL.SCHEDULE_GROUP_MEMBER
(
    SCHEDULE_GROUP_MEMBERS INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    SCHEDULE_GROUP_ID      INT NOT NULL,
    FOREIGN KEY (SCHEDULE_GROUP_ID) REFERENCES SCHEDULE_GROUP (SCHEDULE_GROUP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    EMP_ID                 INT NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE                  VARCHAR(200)
);

-- 17. CC_NOTICE
CREATE TABLE IF NOT EXISTS APPROVAL.CC_NOTICE
(
    NOTICE_NO       INT          NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NOTICE_TITLE    VARCHAR(500) NOT NULL,
    NOTICE_CONTENT  TEXT         NOT NULL,
    COMMENT_YN      CHAR(1)      NOT NULL DEFAULT 'Y',
    CREATE_DT       TIMESTAMP    NOT NULL DEFAULT NOW(),
    UPDATE_DT       TIMESTAMP    NULL     DEFAULT NULL,
    NOTIFICATION_YN CHAR(1)      NOT NULL DEFAULT 'Y',
    DELETE_YN       CHAR(1)      NOT NULL DEFAULT 'N',
    VIEW_COUNT      INT          NOT NULL DEFAULT 0,
    EMP_ID          INT          NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE           VARCHAR(200)
);

-- 18. NOTICE_COMMENT
CREATE TABLE IF NOT EXISTS APPROVAL.NOTICE_COMMENT
(
    COMMENT_NO INT       NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NOTICE_NO  INT       NOT NULL,
    FOREIGN KEY (NOTICE_NO) REFERENCES CC_NOTICE (NOTICE_NO) ON DELETE CASCADE ON UPDATE CASCADE,
    CONTENT    TEXT      NOT NULL,
    CREATE_DT  TIMESTAMP NOT NULL DEFAULT NOW(),
    UPDATE_DT  TIMESTAMP NULL     DEFAULT NULL,
    DELETE_YN  CHAR(1)   NOT NULL DEFAULT 'N',
    EMP_ID     INT       NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE      VARCHAR(200)
);

-- 19. EMP_WORK_POLICY
CREATE TABLE IF NOT EXISTS APPROVAL.EMP_WORK_POLICY
(
    EMP_WORK_POLICY_ID INT         NOT NULL AUTO_INCREMENT PRIMARY KEY,
    DAY_OF_WEEK        VARCHAR(50) NOT NULL,
    WORK_WHETHER       CHAR(1)     NOT NULL,
    WORK_START_TIME    TIMESTAMP   NOT NULL DEFAULT NOW(),
    WORK_END_TIME      TIMESTAMP   NOT NULL DEFAULT NOW(),
    EMP_ID             INT         NOT NULL,
    FOREIGN KEY (EMP_ID) REFERENCES CC_EMP (EMP_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE              VARCHAR(200)
);

-- 20. CC_FILES
CREATE TABLE IF NOT EXISTS APPROVAL.CC_FILES
(
    FILE_NO      INT           NOT NULL AUTO_INCREMENT PRIMARY KEY,
    ORIGIN_NAME  VARCHAR(1000) NOT NULL,
    STORED_NAME  VARCHAR(1000) NULL DEFAULT NULL,
    CREATE_DT    TIMESTAMP     NOT NULL,
    UPDATE_DT    TIMESTAMP     NULL DEFAULT NULL,
    FILE_SIZE    INT           NOT NULL,
    FILE_PATH    VARCHAR(1000) NOT NULL,
    FILE_CONTENT TEXT          NOT NULL,
    SPARE        VARCHAR(200)
);

-- 21. FILES_TYPE
CREATE TABLE IF NOT EXISTS APPROVAL.FILES_TYPE
(
    TYPE_ID   INT     NOT NULL PRIMARY KEY AUTO_INCREMENT,
    FILE_NO   INT     NOT NULL,
    FOREIGN KEY (FILE_NO) REFERENCES CC_FILES (FILE_NO) ON DELETE CASCADE ON UPDATE CASCADE,
    TYPE_INFO CHAR(1) NOT NULL,
    DOC_ID    INT     NOT NULL,
    SPARE     VARCHAR(200)
);

-- 22. LEAVE_POLICY
CREATE TABLE IF NOT EXISTS APPROVAL.LEAVE_POLICY
(
    LEAVE_POLICY_ID  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    LEAVE_TYPE       INT NOT NULL,
    LEAVE_PROVIDE_DT INT NOT NULL,
    SPARE            VARCHAR(200)
);

-- 23. RELATED_DOC
CREATE TABLE IF NOT EXISTS APPROVAL.RELATED_DOC
(
    RELATED_NO     INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    APPRO_DOC_NO   INT NOT NULL,
    FOREIGN KEY (APPRO_DOC_NO) REFERENCES CC_APPRO (DOC_NO) ON DELETE CASCADE ON UPDATE CASCADE,
    RELATED_DOC_NO INT NOT NULL,
    FOREIGN KEY (RELATED_DOC_NO) REFERENCES CC_APPRO (DOC_NO) ON DELETE CASCADE ON UPDATE CASCADE,
    SPARE          VARCHAR(200)
);
